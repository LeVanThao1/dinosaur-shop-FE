{"version":3,"sources":["pages/UploadFile/index.js"],"names":["UploadFile","props","useState","images","setImages","token","useSelector","state","uploadImage","e","a","preventDefault","config","headers","Authorization","urlImages","uploadCloud","Promise","resolve","reject","files","target","i","length","file","formData","FormData","append","axios","post","res","push","data","url","then","result","catch","err","console","log","type","id","name","multiple","onChange","className","map","ig","src","alt","width","height"],"mappings":"sLAyEeA,UAnEf,SAAoBC,GAAQ,IAAD,EACDC,mBAAS,MADR,gCAEGA,mBAAS,KAFZ,mBAElBC,EAFkB,KAEVC,EAFU,KAGnBC,EAAQC,aAAY,SAACC,GAAD,OAAWA,EAAMF,SACrCG,EAAW,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,SAGVC,EAAS,CACbC,QAAS,CACP,eAAgB,sBAChBC,cAAeT,IAGfU,EAAY,GACVC,EAAc,IAAIC,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,uBAAAT,EAAA,sDACxBU,EAAQX,EAAEY,OAAOD,MACdE,EAAI,EAFiB,YAEdA,GAAKb,EAAEY,OAAOD,MAAMG,QAFN,wBAGxBD,IAAMF,EAAMG,QACdL,EAAQH,GAEJS,EAAOJ,EAAME,IAQfG,EAAW,IAAIC,UACVC,OAAO,OAAQH,GAfI,SAgBVI,IAAMC,KACtB,0CACAJ,EACAb,GAnB0B,OAgBtBkB,EAhBsB,OAqB5Bf,EAAUgB,KAAKD,EAAIE,KAAKC,KArBI,QAEcX,IAFd,2DAAZ,yDAwBjBY,MAAK,SAACC,GAAD,OAAYA,KACjBC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,MAnCd,SAoCGrB,EApCH,OAoCVgB,EApCU,OAqChB5B,EAAU4B,GArCM,kDAwChBM,QAAQC,IAAR,MAxCgB,0DAAH,sDA6CjB,OACE,gCACE,uBACEC,KAAK,OACLC,GAAG,OACHC,KAAK,OACLC,UAAQ,EACRC,SAAUpC,IAEZ,qBAAKqC,UAAU,SAAf,SACG1C,EAAO2C,KAAI,SAACC,EAAIzB,GAAL,OACV,qBAAa0B,IAAKD,EAAIE,IAAG,kBAAa3B,GAAK4B,MAAO,IAAKC,OAAQ,KAArD7B","file":"static/js/36.35464e4e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useSelector } from \"react-redux\";\nimport axios from \"axios\";\nUploadFile.propTypes = {};\n\nfunction UploadFile(props) {\n  const [err, setError] = useState(null);\n  const [images, setImages] = useState([]);\n  const token = useSelector((state) => state.token);\n  const uploadImage = async (e) => {\n    e.preventDefault();\n    try {\n      const config = {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: token,\n        },\n      };\n      let urlImages = [];\n      const uploadCloud = new Promise(async (resolve, reject) => {\n        const files = e.target.files;\n        for (let i = 0; i <= e.target.files.length; i++) {\n          if (i === files.length) {\n            resolve(urlImages);\n          }\n          const file = files[i];\n          //   if (!file) return setError(\"No files were uploaded.\");\n\n          //   if (file.size > 1024 * 1024) return setError(\"Size too large.\");\n\n          //   if (file.type !== \"image/jpeg\" && file.type !== \"image/png\")\n          //     return setError(\"File format is incorrect.\");\n\n          let formData = new FormData();\n          formData.append(\"file\", file);\n          const res = await axios.post(\n            \"http://localhost:3001/api/upload_single\",\n            formData,\n            config\n          );\n          urlImages.push(res.data.url);\n        }\n      })\n        .then((result) => result)\n        .catch((err) => console.log(err));\n      const data = await uploadCloud;\n      setImages(data);\n      //   setImages(uploadCloud);\n    } catch (err) {\n      console.log(err);\n      //   setError(err.response.data.msg);\n    }\n  };\n\n  return (\n    <div>\n      <input\n        type=\"file\"\n        id=\"file\"\n        name=\"file\"\n        multiple\n        onChange={uploadImage}\n      />\n      <div className=\"images\">\n        {images.map((ig, i) => (\n          <img key={i} src={ig} alt={`product-${i}`} width={150} height={150} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default UploadFile;\n"],"sourceRoot":""}